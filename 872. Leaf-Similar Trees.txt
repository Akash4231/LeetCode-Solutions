/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> leaf1,leaf2;
    
    void generate(TreeNode* root){
        if (root==NULL) return;
        generate(root->left);
        if (!root->left && !root->right)
            leaf1.push_back(root->val);
        generate(root->right);
    }
    void generate2(TreeNode* root){
        if (root==NULL) return;
        generate2(root->left);
        if (!root->left && !root->right)
            leaf2.push_back(root->val);
        generate2(root->right);
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        generate(root1);
        generate2(root2);
        
        for (int i=0;i<leaf1.size();i++)    cout<<leaf1[i]<<" ";
        cout<<endl;
        //for (int i=0;i<leaf2.size();i++)    cout<<leaf2[i]<<" ";
        cout<<endl;
        
        if (leaf1.size()!=leaf2.size())   return false;
        for (int i=0;i<leaf1.size();i++)
            if (leaf1[i]!=leaf2[i]) return false;
        return true;
    }
};