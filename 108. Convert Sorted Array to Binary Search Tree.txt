/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void construct(TreeNode* parent, vector<int> &nums,int low, int high){
        if (low>high)   return;
        
        if (low==high){
            if (nums[low]<(parent->val))
                parent->left=new TreeNode(nums[low]);
            else
                parent->right=new TreeNode(nums[low]);
            
            return;
        }
        
        int mid=(low+high)/2;
        if (nums[mid]<(parent->val)){
                parent->left=new TreeNode(nums[mid]);
                construct(parent->left,nums,low,mid-1);
                construct(parent->left,nums,mid+1,high);
        }
        else{
                parent->right=new TreeNode(nums[mid]);
                construct(parent->right,nums,low,mid-1);
                construct(parent->right,nums,mid+1,high);
        }
        return;    
        
    }
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        
        if (nums.size()==0) return NULL;
        
        int low=0;
        int high=nums.size()-1;
        int mid=(low+high)/2;
        
        TreeNode* root=new TreeNode(nums[mid]);
        construct(root,nums,low,mid-1);
        construct(root,nums,mid+1,high);
        
        return root;
    }
};