class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        int dp[n][n];
        for (int i=0;i<n;i++){
            for (int j=0;j<n;j++)
                dp[i][j]=0;
        }
        
        for (int i=0;i<n;i++)   dp[i][i]=1; //legth 1
        
        for (int i=1;i<n;i++){  //length 2
            if (s[i]==s[i-1])
                dp[i-1][i]=1;
        }
        
        for (int i=3;i<=n;i++){  //length 3+
            for (int j=0;(j+i-1)<n;j++){
                int f=j;
                int l=j+i-1;
                if (s[f]==s[l] && dp[f+1][l-1])
                    dp[f][l]=1;
            }
        } 
        
        /*for (int i=0;i<n;i++){
            for (int j=0;j<n;j++)
                cout<<dp[i][j]<<" ";
            cout<<endl;
        }
        return "";*/
        
        int start=0,last=0,len=1;
        for (int i=0;i<n;i++){
            for (int j=i+1;j<n;j++){
                if (dp[i][j]){
                    int l=j-i+1;
                    if (l>len){
                        len=l;
                        start=i;
                        last=j;
                    }
                }
            }
        }
        
        string ans="";
        //cout<<start<<" "<<last;
        //return ans;
        for (int i=start;i<=last;i++)
            ans+=s[i];
        
        return ans;
    }
};